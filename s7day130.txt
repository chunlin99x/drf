s7day130

内容回顾：
	1. 谈谈面向对象？
		
	2. Django声明周期
		a. wsgi
			wsgi，是协议。
			wsgiref，是实现了wsgi协议的一个模块。模块本质：一个socket服务端。（Django）
			werkzeug ，是实现了wsgi协议的一个模块。模块本质：一个socket服务端（Flask框架）
			tornado ，是实现了wsgi协议的一个模块。模块本质：一个socket服务端（Flask框架）
			uwsgi，是实现了wsgi协议的一个模块。模块本质：一个socket服务端。
			
			
	3. Django生命周期（rest framework）
		
		
	4. 中间件&装饰器
		- 适用于所有请求批量做操作
			场景：
				- 基于角色的权限控制
				- 用户认证
				- csrf,（说原理）
				- session（说原理）
				- 黑名单
				- 日志记录
	5. rest 框架原理
		a. 认证流程
		b. 权限
		c. 节流
			

今日内容概要：
	1. 版本	  *
	2. 解析器 *
	3. 序列化 ****
		- 请求数据进行校验
		- QuerySet进行序列化
	4. 分页   **
	5. 路由   **
	6. 视图   **
	7. 渲染器 *
	
	
内容详细：
	1. 版本
		a. URL中通过GET传参()
			自定义：
				http://127.0.0.1:8000/api/users/?version=v2
				
				class ParamVersion(object):
					def determine_version(self, request, *args, **kwargs):
						version = request.query_params.get('version')
						return version

				class UsersView(APIView):

					versioning_class = ParamVersion
					def get(self,request,*args,**kwargs):
						#version = request._request.GET.get('version')
						#print(version)
						# version = request.query_params.get('version')
						# print(version)

						print(request.version)

						return HttpResponse('用户列表')

	
		b. 在URL中传参（推荐使用）
		
			urlpatterns = [
				# url(r'^admin/', admin.site.urls),
				url(r'^(?P<version>[v1|v2]+)/users/$', views.UsersView.as_view()),
			]

			
			REST_FRAMEWORK = {
				"DEFAULT_VERSIONING_CLASS":"rest_framework.versioning.URLPathVersioning",
				"DEFAULT_VERSION":'v1',
				"ALLOWED_VERSIONS":['v1','v2'],
				"VERSION_PARAM":'version',
			}
			
			class UsersView(APIView):

				def get(self,request,*args,**kwargs):
					print(request.version)
					return HttpResponse('用户列表')
				
		总结：
			使用：
				配置文件：
					REST_FRAMEWORK = {
						"DEFAULT_VERSIONING_CLASS":"rest_framework.versioning.URLPathVersioning",
						"DEFAULT_VERSION":'v1',
						"ALLOWED_VERSIONS":['v1','v2'],
						"VERSION_PARAM":'version',
					}
				路由系统：
										
					urlpatterns = [
						# url(r'^admin/', admin.site.urls),
						url(r'^api/', include('api.urls')),
					]

					urlpatterns = [
						# url(r'^admin/', admin.site.urls),
						url(r'^(?P<version>[v1|v2]+)/users/$', views.UsersView.as_view(),name='uuu'),
					]
							
				
				视图：
					
					class UsersView(APIView):

					def get(self,request,*args,**kwargs):
				
						# 1. 获取版本
						print(request.version)
						
						# 2. 获取处理版本的对象
						print(request.versioning_scheme)

						# 3. 反向生成URL（rest framework）
						u1 = request.versioning_scheme.reverse(viewname='uuu',request=request)
						print(u1)

						# 4. 反向生成URL
						u2 = reverse(viewname='uuu',kwargs={'version':2})
						print(u2)

						return HttpResponse('用户列表')
		
	2. 解析器
		前戏：django:request.POST/ request.body
			1. 请求头要求：
				Content-Type: application/x-www-form-urlencoded
				PS: 如果请求头中的 Content-Type: application/x-www-form-urlencoded，request.POST中才有值（去request.body中解析数据）。
			2. 数据格式要求：
				  name=alex&age=18&gender=男
		
			如：
				a. form表单提交
					<form method...>
						input...
						
					</form>
					
				b. ajax提交
					$.ajax({
						url:...
						type:POST,
						data:{name:alex,age=18} # 内部转化 name=alex&age=18&gender=男
					})
					
					情况一：
						$.ajax({
							url:...
							type:POST,
							headers:{'Content-Type':"application/json"}
							data:{name:alex,age=18} # 内部转化 name=alex&age=18&gender=男
						})
						# body有值；POST无
					情况二：
						$.ajax({
							url:...
							type:POST,
							headers:{'Content-Type':"application/json"}
							data:JSON.stringfy({name:alex,age=18}) # {name:alex,age:18...}
						})
						# body有值；POST无
						# json.loads(request.body)
					
		rest_framework 解析器，对请求体数据进行解析
			
		总结：
			使用：	
				配置：
					REST_FRAMEWORK = {
						"DEFAULT_VERSIONING_CLASS":"rest_framework.versioning.URLPathVersioning",
						"DEFAULT_VERSION":'v1',
						"ALLOWED_VERSIONS":['v1','v2'],
						"VERSION_PARAM":'version',
						
						"DEFAULT_PARSER_CLASSES":['rest_framework.parsers.JSONParser','rest_framework.parsers.FormParser']
					}
								
				使用：
					class ParserView(APIView):
						# parser_classes = [JSONParser,FormParser,]
						"""
						JSONParser:表示只能解析content-type:application/json头
						JSONParser:表示只能解析content-type:application/x-www-form-urlencoded头
						"""

						def post(self,request,*args,**kwargs):
							"""
							允许用户发送JSON格式数据
								a. content-type: application/json
								b. {'name':'alex',age:18}
							:param request:
							:param args:
							:param kwargs:
							:return:
							"""
							"""
							1. 获取用户请求
							2. 获取用户请求体
							3. 根据用户请求头 和 parser_classes = [JSONParser,FormParser,] 中支持的请求头进行比较
							4. JSONParser对象去请求体
							5. request.data
							"""
							print(request.data)


							return HttpResponse('ParserView')
							
		
			源码流程 & 本质：
				a. 本质 
					请求头 :...
					状态码: ...
					请求方法:...
				b. 源码流程 
					- dispatch: request封装 
					- request.data 
				
		
		
	3. 序列化 
		
		序列化：
			部分总结：
				1. 写类
					class RolesSerializer(serializers.Serializer):
						id = serializers.IntegerField()
						title = serializers.CharField()
			
					class UserInfoSerializer(serializers.ModelSerializer):
						class Meta:
							model = models.UserInfo
							# fields = "__all__"
							fields = ['id','username','password',]
			
				2. 字段 
					a. title = serializers.CharField(source="xxx.xxx.xx.xx")
					b. title = serializers.SerializerMethodField()
					   class UserInfoSerializer(serializers.ModelSerializer):
							rls = serializers.SerializerMethodField()  # 自定义显示

							class Meta:
								model = models.UserInfo
								fields = ['id','username','password','rls',]
							
							# 自定义方法
							def get_rls(self, row):
								role_obj_list = row.roles.all()

								ret = []
								for item in role_obj_list:
									ret.append({'id':item.id,'title':item.title})
								return ret
					c. 自定义类
						
				3. 自动序列化连表
					class UserInfoSerializer(serializers.ModelSerializer):
					class Meta:
						model = models.UserInfo
						# fields = "__all__"
						fields = ['id','username','password','group','roles']
						depth = 1 # 0 ~ 10
			
				4. 生成链接
					class UserInfoSerializer(serializers.ModelSerializer):
						group = serializers.HyperlinkedIdentityField(view_name='gp',lookup_field='group_id',lookup_url_kwarg='xxx')
						class Meta:
							model = models.UserInfo
							# fields = "__all__"
							fields = ['id','username','password','group','roles']
							depth = 0 # 0 ~ 10

					class UserInfoView(APIView):
						def get(self,request,*args,**kwargs):

							users = models.UserInfo.objects.all()

							ser = UserInfoSerializer(instance=users,many=True,context={'request': request})
							ret = json.dumps(ser.data, ensure_ascii=False)
							return HttpResponse(ret)

			源码：
				对象， Serializer类处理；
				QuerySet，ListSerializer类处理；
				# ser.data
				
		请求数据校验：
							
				class XXValidator(object):
					def __init__(self, base):
						self.base = base

					def __call__(self, value):
						if not value.startswith(self.base):
							message = '标题必须以 %s 为开头。' % self.base
							raise serializers.ValidationError(message)

					def set_context(self, serializer_field):
						"""
						This hook is called by the serializer instance,
						prior to the validation call being made.
						"""
						# 执行验证之前调用,serializer_fields是当前字段对象
						pass

				class UserGroupSerializer(serializers.Serializer):
					title = serializers.CharField(error_messages={'required':'标题不能为空'},validators=[XXValidator('老男人'),])


				class UserGroupView(APIView):

					def post(self,request,*args,**kwargs):

						ser = UserGroupSerializer(data=request.data)
						if ser.is_valid():
							print(ser.validated_data['title'])
						else:
							print(ser.errors)

						return HttpResponse('提交数据')
		
		
			问： 自定义验证规则时，需要钩子函数？请问钩子函数如何写？
		
		
		
今日作业：
	1. 今日内容
	
	2. 序列化自定义钩子函数
		
		
		
	
	
	
	
	
	