s7day131 

内容回顾：
	1. rest规范
	
	2. rest framework
		- 要求：前4个组件
		- 序列化

今日内容概要：
	0. 序列化源码

	1. 分页
		a. 分页，看第n页，每页显示n条数据；
			from rest_framework.pagination import PageNumberPagination

			class MyPageNumberPagination(PageNumberPagination):

				page_size = 2
				page_size_query_param = 'size'
				max_page_size = 5
				page_query_param = 'page'

			class Pager1View(APIView):

				def get(self,request,*args,**kwargs):

					# 获取所有数据
					roles = models.Role.objects.all()

					# 创建分页对象
					# pg = MyPageNumberPagination()
					pg = PageNumberPagination()

					# 在数据库中获取分页的数据
					pager_roles = pg.paginate_queryset(queryset=roles,request=request,view=self)

					# 对数据进行序列化
					ser = PagerSerialiser(instance=pager_roles, many=True)

					return Response(ser.data)
					# return pg.get_paginated_response(ser.data)
		
		
		b. 分页，在n个位置，向后查看n条数据；
							
				from api.utils.serializsers.pager import PagerSerialiser
				from rest_framework.response import Response
				from rest_framework.pagination import PageNumberPagination,LimitOffsetPagination


				class MyLimitOffsetPagination(LimitOffsetPagination):
					default_limit = 2
					limit_query_param = 'limit'
					offset_query_param = 'offset'
					max_limit = 5


				class Pager1View(APIView):

					def get(self,request,*args,**kwargs):

						# 获取所有数据
						roles = models.Role.objects.all()

						# 创建分页对象
						# pg = MyLimitOffsetPagination()
						pg = LimitOffsetPagination()

						# 在数据库中获取分页的数据
						pager_roles = pg.paginate_queryset(queryset=roles,request=request,view=self)

						# 对数据进行序列化
						ser = PagerSerialiser(instance=pager_roles, many=True)

						return Response(ser.data)
						# return pg.get_paginated_response(ser.data)
		
		
		
		c. 加密分页，上一页和下一页。
			
			from api.utils.serializsers.pager import PagerSerialiser
			from rest_framework.response import Response
			from rest_framework.pagination import PageNumberPagination,LimitOffsetPagination,CursorPagination

			class MyCursorPagination(CursorPagination):
				cursor_query_param = 'cursor'
				page_size = 2
				ordering = 'id'
				page_size_query_param = None
				max_page_size = None

			class Pager1View(APIView):

				def get(self,request,*args,**kwargs):

					# 获取所有数据
					roles = models.Role.objects.all()

					# 创建分页对象
					# pg = CursorPagination()
					pg = MyCursorPagination()

					# 在数据库中获取分页的数据
					pager_roles = pg.paginate_queryset(queryset=roles,request=request,view=self)

					# 对数据进行序列化
					ser = PagerSerialiser(instance=pager_roles, many=True)

					# return Response(ser.data)
					return pg.get_paginated_response(ser.data)
		总结：
			1. 数据量大的话，如何做分页？
				- 数据库性能相关？
	2. 视图
		a. 过去 
			class Pager1View(View):
				pass
				
		b. 现在 
			class Pager1View(APIView): # View
				pass
		
		c. 无用
		
			from api.utils.serializsers.pager import PagerSerialiser
			from rest_framework.generics import GenericAPIView

			class View1View(GenericAPIView): # APIView
				queryset = models.Role.objects.all()
				serializer_class = PagerSerialiser
				pagination_class = PageNumberPagination
				def get(self,request,*args,**kwargs):
					# 获取数据
					roles = self.get_queryset() # models.Role.objects.all()

					# [1, 1000,]     [1,10]
					pager_roles = self.paginate_queryset(roles)

					# 序列化
					ser = self.get_serializer(instance=pager_roles,many=True)

					return Response(ser.data)
	
		d. GenericViewSet(ViewSetMixin, generics.GenericAPIView):
				
			路由：
				url(r'^(?P<version>[v1|v2]+)/v1/$', views.View1View.as_view({'get': 'list'})),
			
			视图：
				from api.utils.serializsers.pager import PagerSerialiser
				from rest_framework.viewsets import GenericViewSet

				class View1View(GenericViewSet):
					queryset = models.Role.objects.all()
					serializer_class = PagerSerialiser
					pagination_class = PageNumberPagination

					def list(self, request, *args, **kwargs):
						# 获取数据
						roles = self.get_queryset()  # models.Role.objects.all()

						# [1, 1000,]     [1,10]
						pager_roles = self.paginate_queryset(roles)

						# 序列化
						ser = self.get_serializer(instance=pager_roles, many=True)

						return Response(ser.data)
						
		e. 
			路由系统：
				url(r'^(?P<version>[v1|v2]+)/v1/$', views.View1View.as_view({'get': 'list','post':'create'})),
				url(r'^(?P<version>[v1|v2]+)/v1/(?P<pk>\d+)/$', views.View1View.as_view({'get': 'retrieve','delete':'destroy','put':'update','patch':'partial_update'})),

			视图：
				from api.utils.serializsers.pager import PagerSerialiser
				from rest_framework.viewsets import GenericViewSet,ModelViewSet
				from rest_framework.mixins import ListModelMixin,CreateModelMixin

				class View1View(ModelViewSet):
					queryset = models.Role.objects.all()
					serializer_class = PagerSerialiser
					pagination_class = PageNumberPagination
					
				PS: class View1View(CreateModelMixin,GenericViewSet):
		总结：
			a. 增删改查 ModelViewSet
			b. 增删     CreateModelMixin,DestroyModelMixin  GenericViewSet
			c. 复杂逻辑  GenericViewSet 或 APIView 
			
			PS: 还债： 
				GenericAPIView.get_object
					check_object_permissions
						has_object_permission
		
	3. 路由
		a. 
			url(r'^(?P<version>[v1|v2]+)/parser/$', views.ParserView.as_view()),
			
		b. 
			url(r'^(?P<version>[v1|v2]+)/v1/$', views.View1View.as_view({'get': 'list','post':'create'})),
		
		c. 
			# http://127.0.0.1:8000/api/v1/v1/?format=json
			url(r'^(?P<version>[v1|v2]+)/v1/$', views.View1View.as_view({'get': 'list','post':'create'})),
			# http://127.0.0.1:8000/api/v1/v1.json
			url(r'^(?P<version>[v1|v2]+)/v1\.(?P<format>\w+)$', views.View1View.as_view({'get': 'list','post':'create'})),

			url(r'^(?P<version>[v1|v2]+)/v1/(?P<pk>\d+)/$', views.View1View.as_view({'get': 'retrieve','delete':'destroy','put':'update','patch':'partial_update'})),
			url(r'^(?P<version>[v1|v2]+)/v1/(?P<pk>\d+)\.(?P<format>\w+)$', views.View1View.as_view({'get': 'retrieve','delete':'destroy','put':'update','patch':'partial_update'})),
		d. 
			from api import views
			from rest_framework import routers


			router = routers.DefaultRouter()
			router.register(r'xxxxx', views.View1View)
			router.register(r'rt', views.View1View)

			urlpatterns = [
				url(r'^(?P<version>[v1|v2]+)/', include(router.urls)),
			]
		
	4. 渲染
		from rest_framework.renderers import JSONRenderer,BrowsableAPIRenderer

		class TestView(APIView):
			# renderer_classes = [JSONRenderer,BrowsableAPIRenderer]
			def get(self, request, *args, **kwargs):
				# 获取所有数据
				roles = models.Role.objects.all()

				# 创建分页对象
				# pg = CursorPagination()
				pg = MyCursorPagination()

				# 在数据库中获取分页的数据
				pager_roles = pg.paginate_queryset(queryset=roles, request=request, view=self)

				# 对数据进行序列化
				ser = PagerSerialiser(instance=pager_roles, many=True)

				return Response(ser.data)
				
				
		REST_FRAMEWORK = {
			"DEFAULT_VERSIONING_CLASS":"rest_framework.versioning.URLPathVersioning",
			"DEFAULT_VERSION":'v1',
			"ALLOWED_VERSIONS":['v1','v2'],
			"VERSION_PARAM":'version',
			"DEFAULT_PARSER_CLASSES":['rest_framework.parsers.JSONParser','rest_framework.parsers.FormParser'],
			"PAGE_SIZE":2,
			
			"DEFAULT_RENDERER_CLASSES":[
				'rest_framework.renderers.JSONRenderer',
				'rest_framework.renderers.BrowsableAPIRenderer',
			]
		}
				
	5. django组件：contenttype
	
	
今日作业：
	1. 序列化 
	2. 视图继承流程
	3. 写代码 
		a. vue
			- 看到登录页面
			- 数据用户名和密码，发送ajax请求
			
			- 用户列表页面，将用户数据显示在页面中。
				
			- 学生详细信息
			
		b. django rest framework
			- /auth/
				返回token
			- /students/（认证）
				返回学生列表
			- /students/\d+/
				返回学生详细信息
			
		c. 节流：
			控制
				- 匿名用户  2分钟10次
				- 正常用户  2分钟20次
			
	PS: 
		CORS
			
			
			
				
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	